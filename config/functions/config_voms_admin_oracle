##############################################################################
# Copyright (c) Members of the EGEE Collaboration. 2004. 
# See http://www.eu-egee.org/partners/ for details on the copyright 
# holders.  
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
#
#    http://www.apache.org/licenses/LICENSE-2.0 
#
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS 
# OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
##############################################################################
#
# NAME : 	    config_voms_admin_oracle
#
# DESCRIPTION : This function configures the voms admin for oracle.
 
# AUTHORS :     yaim-contact@cern.ch
#
# NOTES : 
#
# YAIM MODULE:  glite-yaim-voms
#                 
##############################################################################

config_voms_admin_oracle_check () {

# Check whether oracle libraries are properly installed in ld.so.conf
# This is commented out since JVM doesn't support ld.so.conf mechanism.
# grep ${VOMS_ADMIN_ORACLE_CLIENT}/lib /etc/ld.so.conf
# if [ $? -eq 1 ]; then
#   echo ${VOMS_ADMIN_ORACLE_CLIENT}/lib >> /etc/ld.so.conf
#   /sbin/ldconfig
# fi

# The following variables are declared always per VO
requires $1 VOS VO__VOMS_DB_NAME VO__VOMS_DB_USER VO__VOMS_DB_USER_PASSWORD VO__VOMS_PORT 
if [ $? -eq 1 ]; then   
    exit 1   
fi 

# The following variables can be defined per VOMS server or per VO

if [ ! "${VOMS_CORE_TIMEOUT}" ]; then
  requires $1 VO__VOMS_CORE_TIMEOUT
  if [ $? -eq 1 ]; then
    exit 1
  fi
fi

if [ ! "${VOMS_ADMIN_DB_HOST}" ]; then 
  requires $1 VO__VOMS_ADMIN_DB_HOST 
  if [ $? -eq 1 ]; then   
    exit 1   
  fi 
fi
if [ ! "${VOMS_ADMIN_SMTP_HOST}" ]; then 
  requires $1 VO__VOMS_ADMIN_SMTP_HOST 
  if [ $? -eq 1 ]; then
    exit 1
  fi
fi
if [ ! "${VOMS_ADMIN_MAIL}" ]; then 
  requires $1 VO__VOMS_ADMIN_MAIL 
  if [ $? -eq 1 ]; then
    exit 1
  fi
fi

# The following variables are declared by default but we check them too
requires $1 VOMS_ADMIN_ORACLE_CLIENT VOMS_ADMIN_INSTALL
if [ $? -eq 1 ]; then
  exit 1
fi

return 0

}

config_voms_admin_oracle_setenv () {

if [ ! -d ${VOMS_ADMIN_ORACLE_CLIENT} ]; then
  yaimlog ERROR "The Oracle InstantClient cannot be found at ${VOMS_ADMIN_ORACLE_CLIENT}"
  yaimlog ERROR "Please, check the definition of VOMS_ADMIN_ORACLE_CLIENT or install the Oracle InstantClient if it's not installed"
  yestr ${YEX_NOSUCHFILE}
  yaimlog ERROR "${YERRORSTR}"
  exit ${YEX_NOSUCHFILE}
fi

yaimgridpath_prepend LD_LIBRARY_PATH ${GLOBUS_LOCATION}/lib 
yaimgridpath_prepend LD_LIBRARY_PATH ${VOMS_ADMIN_ORACLE_CLIENT}/lib 

yaimgridenv_set TNS_ADMIN ${GLITE_LOCATION}/etc/voms
yaimgridenv_set GLITE_LOCATION_VAR ${GLITE_LOCATION_VAR}
yaimgridenv_set GLITE_LOCATION_LOG ${GLITE_LOCATION_LOG}
yaimgridenv_set GLITE_LOCATION_TMP ${GLITE_LOCATION_TMP}
yaimgridenv_set VOMSORACLE_MIN_CONNECTION ${VOMS_ADMIN_ORACLE_MIN_CONNECTIONS}
yaimgridenv_set VOMSORACLE_MAX_CONNECTION ${VOMS_ADMIN_ORACLE_MAX_CONNECTIONS}
yaimgridenv_set VOMSORACLE_INC_CONNECTION ${VOMS_ADMIN_ORACLE_START_CONNECTIONS}

}

config_voms_admin_oracle () {

yaimlog DEBUG "Installation of voms-admin: VOMS_ADMIN_INSTALL=${VOMS_ADMIN_INSTALL}"

if [ "x${VOMS_ADMIN_INSTALL}" == "xyes" ]; then

for vo in ${VOS}; do

  yaimlog DEBUG "Saving a copy of the existing configuration file if any ..."
  if [ -f ${GLITE_LOCATION}/etc/voms/${vo}/voms.conf ]; then
    mv ${GLITE_LOCATION}/etc/voms/${vo}/voms.conf ${GLITE_LOCATION}/etc/voms/${vo}/voms.conf.old
  fi

  vo_name=`echo $vo | sed -e 's/-/_/g' -e 's/\./_/g' | tr '[:lower:]' '[:upper:]'`

  yaimlog DEBUG "Configure mandatory parameters for voms admin for VO ${vo}"

  command=" --vo ${vo} --dbtype "oracle""

  vars="VOMS_DB_NAME 
        VOMS_DB_USER 
        VOMS_DB_USER_PASSWORD 
        VOMS_ADMIN_DB_HOST 
        VOMS_ADMIN_ORACLE_PORT 
        VOMS_PORT 
        VOMS_ADMIN_SMTP_HOST 
        VOMS_ADMIN_MAIL" 

  options=(dbname 
           dbusername 
           dbpassword 
           dbhost 
           dbport 
           port 
           smtp-host 
           mail-from) 

  yaimlog DEBUG "Building up the command"
  j=0
  for i in ${vars}; do
    value=`get_vo_param ${vo} $i`
    if [ "x${value}" == "x" ]; then
      value=${!i}
    fi 
    command="$command --${options[$j]} $value"
    if [ $i == "VOMS_DB_NAME" ]; then
      db_name=$value
    fi
    j=`expr $j + 1`
  done
  
  yaimlog DEBUG "Configure optional parameters for voms admin for VO ${vo}"

  if [ "${VOMS_ADMIN_CERT}" ]; then
    command="$command --admincert ${VOMS_ADMIN_CERT}"
  else
    if [ "`eval echo \\$VO_${vo_name}_VOMS_ADMIN_CERT`" ]; then 
      command="$command --admincert `eval echo \\$VO_${vo_name}_VOMS_ADMIN_CERT`"
    fi
  fi
 
  value=`get_vo_param ${vo} VOMS_ADMIN_DEPLOY_DATABASE`
  if [ "x${value}" == "xno" ]; then 
    command="$command --skip-database"
  else
    if [ "x${value}" == "xyes" ]; then
      command="${command} --deploy-database"
    else 
      if [ "x${VOMS_ADMIN_DEPLOY_DATABASE}" == "xno" ]; then
        command="${command} --skip-database"
      else
        if [ "x${VOMS_ADMIN_DEPLOY_DATABASE}" == "xyes" ]; then
          command="${command} --deploy-database"
        else
           command="${command} --skip-database"
        fi
      fi
    fi
  fi

  value=`get_vo_param ${vo} VOMS_ADMIN_WEB_REGISTRATION`
  if [ "x${value}" == "xyes" ]; then
    command="${command} --disable-webui-requests"
  else
    if [ "x${VOMS_ADMIN_WEB_REGISTRATION}" == "xyes" ]; then
      command="${command} --disable-webui-requests"
    fi
  fi 

  if [ "x${VOMS_ADMIN_VERBOSE}" == "xyes" ]; then
    command="${command} --verbose"
  fi

  if [ -n "${VOMS_ADMIN_TOMCAT_GROUP}" ]; then
    command="${command} --tomcat-group ${VOMS_ADMIN_TOMCAT_GROUP}"
  fi

  if [ -n "${VOMS_ADMIN_VOMS_GROUP}" ]; then
    command="${command} --voms-group ${VOMS_ADMIN_VOMS_GROUP}"
  fi

  if [ ! -d ${GLITE_LOCATION}/etc/voms ]; then
    mkdir -p ${GLITE_LOCATION}/etc/voms
  fi
  if [ -f $GLITE_LOCATION/etc/voms/tnsnames.ora ]; then
    rm -rf $GLITE_LOCATION/etc/voms/tnsnames.ora
  fi
  value=`get_vo_param ${vo} VOMS_ADMIN_ORACLE_CONNECTION_STRING`
  if [ -n "${value}" ]; then
    oci=${value}
    yaimlog DEBUG "Create the tnsnames.ora file"
    echo "${db_name}=${value}" >> $GLITE_LOCATION/etc/voms/tnsnames.ora
  else
    if [ -n "${VOMS_ADMIN_ORACLE_CONNECTION_STRING}" ]; then
      oci=${VOMS_ADMIN_ORACLE_CONNECTION_STRING}
      yaimlog DEBUG "Create the tnsnames.ora file"
      echo "${db_name}=${VOMS_ADMIN_ORACLE_CONNECTION_STRING}" >> $GLITE_LOCATION/etc/voms/tnsnames.ora
    else
      oci=""
    fi
  fi
  
  yaimlog DEBUG "The command is ${GLITE_LOCATION}/sbin/voms-admin-configure install ${command}"  
  yaimlog DEBUG "Configure voms-admin for VO ${vo}"
  ${GLITE_LOCATION}/sbin/voms-admin-configure install ${command}

  if [ $? -ne 0 ]; then
    yaimlog ERROR "voms-admin-configure has failed"
    yestr ${YEX_FUNCERR}
    yaimlog ERROR "${YERRORSTR}"
    exit ${YEX_FUNCERR}
  fi  

  yaimlog DEBUG "Setting OCI support for tomcat"
  if grep -q "^JAVA_OPTS" ${CATALINA_HOME}/conf/tomcat5.conf; then
    mv ${CATALINA_HOME}/conf/tomcat5.conf ${CATALINA_HOME}/conf/tomcat5.conf.old
    cat ${CATALINA_HOME}/conf/tomcat5.conf.old | sed -e "s#^JAVA_OPTS .*#JAVA_OPTS=\"$JAVA_OPTS -Djava.library.path=${VOMS_ADMIN_ORACLE_CLIENT}/lib\"#" \
    >> ${CATALINA_HOME}/conf/tomcat5.conf
  else
    echo "JAVA_OPTS=\"$JAVA_OPTS -Djava.library.path=${VOMS_ADMIN_ORACLE_CLIENT}/lib\"" >> ${CATALINA_HOME}/conf/tomcat5.conf
  fi

  # LD_LIBRARY_PATH already contains the oracle libs from the yaimgridpath command
  if grep -q "^export LD_LIBRARY_PATH" ${CATALINA_HOME}/conf/tomcat5.conf; then
    mv ${CATALINA_HOME}/conf/tomcat5.conf ${CATALINA_HOME}/conf/tomcat5.conf.old
    cat ${CATALINA_HOME}/conf/tomcat5.conf.old | sed -e \
    "s#^export LD_LIBRARY_PATH .*#export LD_LIBRARY_PATH=$LD_LIBRARY_PATH#" >> ${CATALINA_HOME}/conf/tomcat5.conf
  else
    echo "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> ${CATALINA_HOME}/conf/tomcat5.conf
  fi

  if ! grep -q "TNS_ADMIN" ${CATALINA_HOME}/conf/tomcat5.conf; then
    echo "export TNS_ADMIN=\"${GLITE_LOCATION}/etc/voms\"" >> ${CATALINA_HOME}/conf/tomcat5.conf
  fi
  
  if [ -f ${VOMS_ADMIN_ORACLE_CLIENT}/lib/ojdbc14.jar ]; then
    cp ${VOMS_ADMIN_ORACLE_CLIENT}/lib/ojdbc14.jar ${CATALINA_HOME}/common/lib/.
  else
    yaimlog ERROR "${VOMS_ADMIN_ORACLE_CLIENT}/lib/ojdbc14.jar doesn't exist and it's needed to configure the OCI support in Tomcat"
    yestr ${YEX_NOSUCHFILE}
    yaimlog ERROR "${YERRORSTR}"
    exit ${YEX_NOSUCHFILE}
  fi

  yaimlog DEBUG "Configure Tomcat memory size"
  MemSize=`free -m | awk '/^Mem/{if($2 <= 4096) printf "%i", $2/2; else print "2048";}'`
  MemSize=${MemSize:-256}
  CATALINA_OPTS="-Xmx${MemSize}M -server -Dsun.net.client.defaultReadTimeout=240000 -XX:MaxPermSize=256m"
  if grep -q "^CATALINA_OPTS" ${CATALINA_HOME}/conf/tomcat5.conf; then
    mv ${CATALINA_HOME}/conf/tomcat5.conf ${CATALINA_HOME}/conf/tomcat5.conf.old
    cat ${CATALINA_HOME}/conf/tomcat5.conf.old | sed -e "s#^CATALINA_OPTS=.*#CATALINA_OPTS=\"${CATALINA_OPTS}\"#" \
    >> ${CATALINA_HOME}/conf/tomcat5.conf
  else
    echo "CATALINA_OPTS=\"${CATALINA_OPTS}\"" >> ${CATALINA_HOME}/conf/tomcat5.conf
  fi

  yaimlog DEBUG "Configure the request scheduler"
  value=`get_vo_param ${vo} VOMS_ADMIN_REQUEST_SCHEDULER`
  if [ "x${value}" == "xno" ]; then
    sched=no
  else
    if [ "x${value}" == "xyes" ]; then
      sched=yes
    else
      if [ "x${VOMS_ADMIN_REQUEST_SCHEDULER}" == "xno" ]; then
        sched=no
      else 
        if [ "x${VOMS_ADMIN_REQUEST_SCHEDULER}" == "xyes" ]; then
          sched=yes
        else
          sched=no
        fi
      fi
    fi
  fi
  if [ "x${sched}" == "xno" ]; then
    echo "voms.complete.requests.expire.after 0" >> ${GLITE_LOCATION_VAR}/etc/voms-admin/${vo}/voms.service.properties
    echo "voms.incomplete.requests.time.out.after 0" >> ${GLITE_LOCATION_VAR}/etc/voms-admin/${vo}/voms.service.properties
    echo "voms.request.expire.task.period.hours 0" >> ${GLITE_LOCATION_VAR}/etc/voms-admin/${vo}/voms.service.properties
    echo "voms.request.timeout.task.period.hours 0" >> ${GLITE_LOCATION_VAR}/etc/voms-admin/${vo}/voms.service.properties
    echo "voms.request.purge.task.period.seconds 0" >> ${GLITE_LOCATION_VAR}/etc/voms-admin/${vo}/voms.service.properties
  else
    echo "voms.complete.requests.expire.after 60" >> ${GLITE_LOCATION_VAR}/etc/voms-admin/${vo}/voms.service.properties
    echo "voms.incomplete.requests.time.out.after 30" >> ${GLITE_LOCATION_VAR}/etc/voms-admin/${vo}/voms.service.properties
    echo "voms.request.expire.task.period.hours 24" >> ${GLITE_LOCATION_VAR}/etc/voms-admin/${vo}/voms.service.properties
    echo "voms.request.timeout.task.period.hours 24" >> ${GLITE_LOCATION_VAR}/etc/voms-admin/${vo}/voms.service.properties
    echo "voms.request.purge.task.period.seconds 2800" >> ${GLITE_LOCATION_VAR}/etc/voms-admin/${vo}/voms.service.properties
  fi

  yaimlog DEBUG "Adding --uri and --timeout options in the configuration file..."
  value=`get_vo_param ${vo} VOMS_CORE_TIMEOUT`
  if [ "x${value}" != "x" ]; then
    timeout=${value}
  else
    timeout=${VOMS_CORE_TIMEOUT}
  fi
  echo "--timeout=${timeout}" >> ${GLITE_LOCATION}/etc/voms/${vo}/voms.conf
  echo "--uri=${VOMS_HOST}:`eval echo \\${VO_${vo_name}_VOMS_PORT}`" >> ${GLITE_LOCATION}/etc/voms/${vo}/voms.conf

  yaimlog DEBUG "Start voms-admin"
  ${GLITE_LOCATION}/etc/init.d/voms-admin stop ${vo}
  ${GLITE_LOCATION}/etc/init.d/voms-admin start ${vo}

done #VOS

  yaimlog DEBUG "Start tomcat"
  /etc/rc.d/init.d/tomcat5 restart
  /sbin/chkconfig tomcat5 on

  # The voms-admin script can't be chkconfig
  # ln -s /opt/glite/etc/init.d/voms-admin /etc/init.d/voms-admin
  # /sbin/chkconfig voms-admin on

else

  yaimlog DEBUG "voms admin is not going to be configured since VOMS_ADMIN_INSTALL=no" 

fi # VOMS_ADMIN_INSTALL=yes

}


